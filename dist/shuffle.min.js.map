{"version":3,"file":"shuffle.min.js","sources":["../node_modules/tiny-emitter/index.js","../node_modules/matches-selector/index.js","../node_modules/throttleit/index.js","../node_modules/array-parallel/index.js","../src/get-number.js","../src/get-number-style.js","../src/sorter.js","../src/on-transition-end.js","../src/array-max.js","../src/array-min.js","../src/layout.js","../src/shuffle.js","../src/point.js","../src/classes.js","../src/shuffle-item.js","../src/computed-size.js"],"sourcesContent":["function E () {\n  // Keep this empty so it's easier to inherit from\n  // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)\n}\n\nE.prototype = {\n  on: function (name, callback, ctx) {\n    var e = this.e || (this.e = {});\n\n    (e[name] || (e[name] = [])).push({\n      fn: callback,\n      ctx: ctx\n    });\n\n    return this;\n  },\n\n  once: function (name, callback, ctx) {\n    var self = this;\n    function listener () {\n      self.off(name, listener);\n      callback.apply(ctx, arguments);\n    };\n\n    listener._ = callback\n    return this.on(name, listener, ctx);\n  },\n\n  emit: function (name) {\n    var data = [].slice.call(arguments, 1);\n    var evtArr = ((this.e || (this.e = {}))[name] || []).slice();\n    var i = 0;\n    var len = evtArr.length;\n\n    for (i; i < len; i++) {\n      evtArr[i].fn.apply(evtArr[i].ctx, data);\n    }\n\n    return this;\n  },\n\n  off: function (name, callback) {\n    var e = this.e || (this.e = {});\n    var evts = e[name];\n    var liveEvents = [];\n\n    if (evts && callback) {\n      for (var i = 0, len = evts.length; i < len; i++) {\n        if (evts[i].fn !== callback && evts[i].fn._ !== callback)\n          liveEvents.push(evts[i]);\n      }\n    }\n\n    // Remove event from queue to prevent memory leak\n    // Suggested by https://github.com/lazd\n    // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910\n\n    (liveEvents.length)\n      ? e[name] = liveEvents\n      : delete e[name];\n\n    return this;\n  }\n};\n\nmodule.exports = E;\n","'use strict';\n\nvar proto = Element.prototype;\nvar vendor = proto.matches\n  || proto.matchesSelector\n  || proto.webkitMatchesSelector\n  || proto.mozMatchesSelector\n  || proto.msMatchesSelector\n  || proto.oMatchesSelector;\n\nmodule.exports = match;\n\n/**\n * Match `el` to `selector`.\n *\n * @param {Element} el\n * @param {String} selector\n * @return {Boolean}\n * @api public\n */\n\nfunction match(el, selector) {\n  if (vendor) return vendor.call(el, selector);\n  var nodes = el.parentNode.querySelectorAll(selector);\n  for (var i = 0; i < nodes.length; i++) {\n    if (nodes[i] == el) return true;\n  }\n  return false;\n}","module.exports = throttle;\n\n/**\n * Returns a new function that, when invoked, invokes `func` at most once per `wait` milliseconds.\n *\n * @param {Function} func Function to wrap.\n * @param {Number} wait Number of milliseconds that must elapse between `func` invocations.\n * @return {Function} A new function that wraps the `func` function passed in.\n */\n\nfunction throttle (func, wait) {\n  var ctx, args, rtn, timeoutID; // caching\n  var last = 0;\n\n  return function throttled () {\n    ctx = this;\n    args = arguments;\n    var delta = new Date() - last;\n    if (!timeoutID)\n      if (delta >= wait) call();\n      else timeoutID = setTimeout(call, wait - delta);\n    return rtn;\n  };\n\n  function call () {\n    timeoutID = 0;\n    last = +new Date();\n    rtn = func.apply(ctx, args);\n    ctx = null;\n    args = null;\n  }\n}\n","module.exports = function parallel(fns, context, callback) {\n  if (!callback) {\n    if (typeof context === 'function') {\n      callback = context\n      context = null\n    } else {\n      callback = noop\n    }\n  }\n\n  var pending = fns && fns.length\n  if (!pending) return callback(null, []);\n\n  var finished = false\n  var results = new Array(pending)\n\n  fns.forEach(context ? function (fn, i) {\n    fn.call(context, maybeDone(i))\n  } : function (fn, i) {\n    fn(maybeDone(i))\n  })\n\n  function maybeDone(i) {\n    return function (err, result) {\n      if (finished) return;\n\n      if (err) {\n        callback(err, results)\n        finished = true\n        return\n      }\n\n      results[i] = result\n\n      if (!--pending) callback(null, results);\n    }\n  }\n}\n\nfunction noop() {}\n","/**\n * Always returns a numeric value, given a value. Logic from jQuery's `isNumeric`.\n * @param {*} value Possibly numeric value.\n * @return {number} `value` or zero if `value` isn't numeric.\n */\nexport default function getNumber(value) {\n  return parseFloat(value) || 0;\n}\n","import getNumber from './get-number';\nimport COMPUTED_SIZE_INCLUDES_PADDING from './computed-size';\n\n/**\n * Retrieve the computed style for an element, parsed as a float.\n * @param {Element} element Element to get style for.\n * @param {string} style Style property.\n * @param {CSSStyleDeclaration} [styles] Optionally include clean styles to\n *     use instead of asking for them again.\n * @return {number} The parsed computed value or zero if that fails because IE\n *     will return 'auto' when the element doesn't have margins instead of\n *     the computed style.\n */\nexport default function getNumberStyle(element, style,\n  styles = window.getComputedStyle(element, null)) {\n  let value = getNumber(styles[style]);\n\n  // Support IE<=11 and W3C spec.\n  if (!COMPUTED_SIZE_INCLUDES_PADDING && style === 'width') {\n    value += getNumber(styles.paddingLeft) +\n      getNumber(styles.paddingRight) +\n      getNumber(styles.borderLeftWidth) +\n      getNumber(styles.borderRightWidth);\n  } else if (!COMPUTED_SIZE_INCLUDES_PADDING && style === 'height') {\n    value += getNumber(styles.paddingTop) +\n      getNumber(styles.paddingBottom) +\n      getNumber(styles.borderTopWidth) +\n      getNumber(styles.borderBottomWidth);\n  }\n\n  return value;\n}\n","/**\n * Fisher-Yates shuffle.\n * http://stackoverflow.com/a/962890/373422\n * https://bost.ocks.org/mike/shuffle/\n * @param {Array} array Array to shuffle.\n * @return {Array} Randomly sorted array.\n */\nfunction randomize(array) {\n  let n = array.length;\n\n  while (n) {\n    n -= 1;\n    const i = Math.floor(Math.random() * (n + 1));\n    const temp = array[i];\n    array[i] = array[n];\n    array[n] = temp;\n  }\n\n  return array;\n}\n\nconst defaults = {\n  // Use array.reverse() to reverse the results\n  reverse: false,\n\n  // Sorting function\n  by: null,\n\n  // If true, this will skip the sorting and return a randomized order in the array\n  randomize: false,\n\n  // Determines which property of each item in the array is passed to the\n  // sorting method.\n  key: 'element',\n};\n\n// You can return `undefined` from the `by` function to revert to DOM order.\nexport default function sorter(arr, options) {\n  const opts = Object.assign({}, defaults, options);\n  const original = Array.from(arr);\n  let revert = false;\n\n  if (!arr.length) {\n    return [];\n  }\n\n  if (opts.randomize) {\n    return randomize(arr);\n  }\n\n  // Sort the elements by the opts.by function.\n  // If we don't have opts.by, default to DOM order\n  if (typeof opts.by === 'function') {\n    arr.sort((a, b) => {\n      // Exit early if we already know we want to revert\n      if (revert) {\n        return 0;\n      }\n\n      const valA = opts.by(a[opts.key]);\n      const valB = opts.by(b[opts.key]);\n\n      // If both values are undefined, use the DOM order\n      if (valA === undefined && valB === undefined) {\n        revert = true;\n        return 0;\n      }\n\n      if (valA < valB || valA === 'sortFirst' || valB === 'sortLast') {\n        return -1;\n      }\n\n      if (valA > valB || valA === 'sortLast' || valB === 'sortFirst') {\n        return 1;\n      }\n\n      return 0;\n    });\n  }\n\n  // Revert to the original array if necessary\n  if (revert) {\n    return original;\n  }\n\n  if (opts.reverse) {\n    arr.reverse();\n  }\n\n  return arr;\n}\n","const transitions = {};\nconst eventName = 'transitionend';\nlet count = 0;\n\nfunction uniqueId() {\n  count += 1;\n  return eventName + count;\n}\n\nexport function cancelTransitionEnd(id) {\n  if (transitions[id]) {\n    transitions[id].element.removeEventListener(eventName, transitions[id].listener);\n    transitions[id] = null;\n    return true;\n  }\n\n  return false;\n}\n\nexport function onTransitionEnd(element, callback) {\n  const id = uniqueId();\n  const listener = (evt) => {\n    if (evt.currentTarget === evt.target) {\n      cancelTransitionEnd(id);\n      callback(evt);\n    }\n  };\n\n  element.addEventListener(eventName, listener);\n\n  transitions[id] = { element, listener };\n\n  return id;\n}\n","export default function arrayMax(array) {\n  return Math.max.apply(Math, array); // eslint-disable-line prefer-spread\n}\n","export default function arrayMin(array) {\n  return Math.min.apply(Math, array); // eslint-disable-line prefer-spread\n}\n","import Point from './point';\nimport arrayMax from './array-max';\nimport arrayMin from './array-min';\n\n/**\n * Determine the number of columns an items spans.\n * @param {number} itemWidth Width of the item.\n * @param {number} columnWidth Width of the column (includes gutter).\n * @param {number} columns Total number of columns\n * @param {number} threshold A buffer value for the size of the column to fit.\n * @return {number}\n */\nexport function getColumnSpan(itemWidth, columnWidth, columns, threshold) {\n  let columnSpan = itemWidth / columnWidth;\n\n  // If the difference between the rounded column span number and the\n  // calculated column span number is really small, round the number to\n  // make it fit.\n  if (Math.abs(Math.round(columnSpan) - columnSpan) < threshold) {\n    // e.g. columnSpan = 4.0089945390298745\n    columnSpan = Math.round(columnSpan);\n  }\n\n  // Ensure the column span is not more than the amount of columns in the whole layout.\n  return Math.min(Math.ceil(columnSpan), columns);\n}\n\n/**\n * Retrieves the column set to use for placement.\n * @param {number} columnSpan The number of columns this current item spans.\n * @param {number} columns The total columns in the grid.\n * @return {Array.<number>} An array of numbers represeting the column set.\n */\nexport function getAvailablePositions(positions, columnSpan, columns) {\n  // The item spans only one column.\n  if (columnSpan === 1) {\n    return positions;\n  }\n\n  // The item spans more than one column, figure out how many different\n  // places it could fit horizontally.\n  // The group count is the number of places within the positions this block\n  // could fit, ignoring the current positions of items.\n  // Imagine a 2 column brick as the second item in a 4 column grid with\n  // 10px height each. Find the places it would fit:\n  // [20, 10, 10, 0]\n  //  |   |   |\n  //  *   *   *\n  //\n  // Then take the places which fit and get the bigger of the two:\n  // max([20, 10]), max([10, 10]), max([10, 0]) = [20, 10, 0]\n  //\n  // Next, find the first smallest number (the short column).\n  // [20, 10, 0]\n  //          |\n  //          *\n  //\n  // And that's where it should be placed!\n  //\n  // Another example where the second column's item extends past the first:\n  // [10, 20, 10, 0] => [20, 20, 10] => 10\n  const available = [];\n\n  // For how many possible positions for this item there are.\n  for (let i = 0; i <= columns - columnSpan; i++) {\n    // Find the bigger value for each place it could fit.\n    available.push(arrayMax(positions.slice(i, i + columnSpan)));\n  }\n\n  return available;\n}\n\n/**\n * Find index of short column, the first from the left where this item will go.\n *\n * @param {Array.<number>} positions The array to search for the smallest number.\n * @param {number} buffer Optional buffer which is very useful when the height\n *     is a percentage of the width.\n * @return {number} Index of the short column.\n */\nexport function getShortColumn(positions, buffer) {\n  const minPosition = arrayMin(positions);\n  for (let i = 0, len = positions.length; i < len; i++) {\n    if (positions[i] >= minPosition - buffer && positions[i] <= minPosition + buffer) {\n      return i;\n    }\n  }\n\n  return 0;\n}\n\n/**\n * Determine the location of the next item, based on its size.\n * @param {Object} itemSize Object with width and height.\n * @param {Array.<number>} positions Positions of the other current items.\n * @param {number} gridSize The column width or row height.\n * @param {number} total The total number of columns or rows.\n * @param {number} threshold Buffer value for the column to fit.\n * @param {number} buffer Vertical buffer for the height of items.\n * @return {Point}\n */\nexport function getItemPosition({ itemSize, positions, gridSize, total, threshold, buffer }) {\n  const span = getColumnSpan(itemSize.width, gridSize, total, threshold);\n  const setY = getAvailablePositions(positions, span, total);\n  const shortColumnIndex = getShortColumn(setY, buffer);\n\n  // Position the item\n  const point = new Point(\n    Math.round(gridSize * shortColumnIndex),\n    Math.round(setY[shortColumnIndex]));\n\n  // Update the columns array with the new values for each column.\n  // e.g. before the update the columns could be [250, 0, 0, 0] for an item\n  // which spans 2 columns. After it would be [250, itemHeight, itemHeight, 0].\n  const setHeight = setY[shortColumnIndex] + itemSize.height;\n  for (let i = 0; i < span; i++) {\n    positions[shortColumnIndex + i] = setHeight;\n  }\n\n  return point;\n}\n","import TinyEmitter from 'tiny-emitter';\nimport matches from 'matches-selector';\nimport throttle from 'throttleit';\nimport parallel from 'array-parallel';\n\nimport Point from './point';\nimport ShuffleItem from './shuffle-item';\nimport Classes from './classes';\nimport getNumberStyle from './get-number-style';\nimport sorter from './sorter';\nimport { onTransitionEnd, cancelTransitionEnd } from './on-transition-end';\nimport { getItemPosition, getColumnSpan, getAvailablePositions, getShortColumn } from './layout';\nimport arrayMax from './array-max';\n\nfunction arrayUnique(x) {\n  return Array.from(new Set(x));\n}\n\n// Used for unique instance variables\nlet id = 0;\n\nclass Shuffle extends TinyEmitter {\n\n  /**\n   * Categorize, sort, and filter a responsive grid of items.\n   *\n   * @param {Element} element An element which is the parent container for the grid items.\n   * @param {Object} [options=Shuffle.options] Options object.\n   * @constructor\n   */\n  constructor(element, options = {}) {\n    super();\n    this.options = Object.assign({}, Shuffle.options, options);\n\n    this.useSizer = false;\n    this.lastSort = {};\n    this.group = Shuffle.ALL_ITEMS;\n    this.lastFilter = Shuffle.ALL_ITEMS;\n    this.isEnabled = true;\n    this.isDestroyed = false;\n    this.isInitialized = false;\n    this._transitions = [];\n    this.isTransitioning = false;\n    this._queue = [];\n\n    const el = this._getElementOption(element);\n\n    if (!el) {\n      throw new TypeError('Shuffle needs to be initialized with an element.');\n    }\n\n    this.element = el;\n    this.id = 'shuffle_' + id;\n    id += 1;\n\n    this._init();\n    this.isInitialized = true;\n  }\n\n  _init() {\n    this.items = this._getItems();\n\n    this.options.sizer = this._getElementOption(this.options.sizer);\n\n    if (this.options.sizer) {\n      this.useSizer = true;\n    }\n\n    // Add class and invalidate styles\n    this.element.classList.add(Shuffle.Classes.BASE);\n\n    // Set initial css for each item\n    this._initItems(this.items);\n\n    // Bind resize events\n    this._onResize = this._getResizeFunction();\n    window.addEventListener('resize', this._onResize);\n\n    // If the page has not already emitted the `load` event, call layout on load.\n    // This avoids layout issues caused by images and fonts loading after the\n    // instance has been initialized.\n    if (document.readyState !== 'complete') {\n      const layout = this.layout.bind(this);\n      window.addEventListener('load', function onLoad() {\n        window.removeEventListener('load', onLoad);\n        layout();\n      });\n    }\n\n    // Get container css all in one request. Causes reflow\n    const containerCss = window.getComputedStyle(this.element, null);\n    const containerWidth = Shuffle.getSize(this.element).width;\n\n    // Add styles to the container if it doesn't have them.\n    this._validateStyles(containerCss);\n\n    // We already got the container's width above, no need to cause another\n    // reflow getting it again... Calculate the number of columns there will be\n    this._setColumns(containerWidth);\n\n    // Kick off!\n    this.filter(this.options.group, this.options.initialSort);\n\n    // The shuffle items haven't had transitions set on them yet so the user\n    // doesn't see the first layout. Set them now that the first layout is done.\n    // First, however, a synchronous layout must be caused for the previous\n    // styles to be applied without transitions.\n    this.element.offsetWidth; // eslint-disable-line no-unused-expressions\n    this.setItemTransitions(this.items);\n    this.element.style.transition = 'height ' + this.options.speed + 'ms ' + this.options.easing;\n  }\n\n  /**\n   * Returns a throttled and proxied function for the resize handler.\n   * @return {Function}\n   * @private\n   */\n  _getResizeFunction() {\n    const resizeFunction = this._handleResize.bind(this);\n    return this.options.throttle ?\n        this.options.throttle(resizeFunction, this.options.throttleTime) :\n        resizeFunction;\n  }\n\n  /**\n   * Retrieve an element from an option.\n   * @param {string|jQuery|Element} option The option to check.\n   * @return {?Element} The plain element or null.\n   * @private\n   */\n  _getElementOption(option) {\n    // If column width is a string, treat is as a selector and search for the\n    // sizer element within the outermost container\n    if (typeof option === 'string') {\n      return this.element.querySelector(option);\n\n    // Check for an element\n    } else if (option && option.nodeType && option.nodeType === 1) {\n      return option;\n\n    // Check for jQuery object\n    } else if (option && option.jquery) {\n      return option[0];\n    }\n\n    return null;\n  }\n\n  /**\n   * Ensures the shuffle container has the css styles it needs applied to it.\n   * @param {Object} styles Key value pairs for position and overflow.\n   * @private\n   */\n  _validateStyles(styles) {\n    // Position cannot be static.\n    if (styles.position === 'static') {\n      this.element.style.position = 'relative';\n    }\n\n    // Overflow has to be hidden.\n    if (styles.overflow !== 'hidden') {\n      this.element.style.overflow = 'hidden';\n    }\n  }\n\n  /**\n   * Filter the elements by a category.\n   * @param {string} [category] Category to filter by. If it's given, the last\n   *     category will be used to filter the items.\n   * @param {Array} [collection] Optionally filter a collection. Defaults to\n   *     all the items.\n   * @return {!{visible: Array, hidden: Array}}\n   * @private\n   */\n  _filter(category = this.lastFilter, collection = this.items) {\n    const set = this._getFilteredSets(category, collection);\n\n    // Individually add/remove hidden/visible classes\n    this._toggleFilterClasses(set);\n\n    // Save the last filter in case elements are appended.\n    this.lastFilter = category;\n\n    // This is saved mainly because providing a filter function (like searching)\n    // will overwrite the `lastFilter` property every time its called.\n    if (typeof category === 'string') {\n      this.group = category;\n    }\n\n    return set;\n  }\n\n  /**\n   * Returns an object containing the visible and hidden elements.\n   * @param {string|Function} category Category or function to filter by.\n   * @param {Array.<Element>} items A collection of items to filter.\n   * @return {!{visible: Array, hidden: Array}}\n   * @private\n   */\n  _getFilteredSets(category, items) {\n    let visible = [];\n    const hidden = [];\n\n    // category === 'all', add visible class to everything\n    if (category === Shuffle.ALL_ITEMS) {\n      visible = items;\n\n    // Loop through each item and use provided function to determine\n    // whether to hide it or not.\n    } else {\n      items.forEach((item) => {\n        if (this._doesPassFilter(category, item.element)) {\n          visible.push(item);\n        } else {\n          hidden.push(item);\n        }\n      });\n    }\n\n    return {\n      visible,\n      hidden,\n    };\n  }\n\n  /**\n   * Test an item to see if it passes a category.\n   * @param {string|Function} category Category or function to filter by.\n   * @param {Element} element An element to test.\n   * @return {boolean} Whether it passes the category/filter.\n   * @private\n   */\n  _doesPassFilter(category, element) {\n    if (typeof category === 'function') {\n      return category.call(element, element, this);\n    }\n\n    // Check each element's data-groups attribute against the given category.\n    const attr = element.getAttribute('data-' + Shuffle.FILTER_ATTRIBUTE_KEY);\n    const keys = this.options.delimeter ?\n          attr.split(this.options.delimeter) :\n          JSON.parse(attr);\n\n    function testCategory(category) {\n      return keys.includes(category);\n    }\n\n    if (Array.isArray(category)) {\n      if (this.options.filterMode === Shuffle.FilterMode.ANY) {\n        return category.some(testCategory);\n      }\n      return category.every(testCategory);\n    }\n\n    return keys.includes(category);\n  }\n\n  /**\n   * Toggles the visible and hidden class names.\n   * @param {{visible, hidden}} Object with visible and hidden arrays.\n   * @private\n   */\n  _toggleFilterClasses({ visible, hidden }) {\n    visible.forEach((item) => {\n      item.show();\n    });\n\n    hidden.forEach((item) => {\n      item.hide();\n    });\n  }\n\n  /**\n   * Set the initial css for each item\n   * @param {Array.<ShuffleItem>} items Set to initialize.\n   * @private\n   */\n  _initItems(items) {\n    items.forEach((item) => {\n      item.init();\n    });\n  }\n\n  /**\n   * Remove element reference and styles.\n   * @param {Array.<ShuffleItem>} items Set to dispose.\n   * @private\n   */\n  _disposeItems(items) {\n    items.forEach((item) => {\n      item.dispose();\n    });\n  }\n\n  /**\n   * Updates the visible item count.\n   * @private\n   */\n  _updateItemCount() {\n    this.visibleItems = this._getFilteredItems().length;\n  }\n\n  /**\n   * Sets css transform transition on a group of elements. This is not executed\n   * at the same time as `item.init` so that transitions don't occur upon\n   * initialization of Shuffle.\n   * @param {Array.<ShuffleItem>} items Shuffle items to set transitions on.\n   * @protected\n   */\n  setItemTransitions(items) {\n    const speed = this.options.speed;\n    const easing = this.options.easing;\n\n    const str = this.options.useTransforms ?\n      `transform ${speed}ms ${easing}, opacity ${speed}ms ${easing}` :\n      `top ${speed}ms ${easing}, left ${speed}ms ${easing}, opacity ${speed}ms ${easing}`;\n\n    items.forEach((item) => {\n      item.element.style.transition = str;\n    });\n  }\n\n  _getItems() {\n    return Array.from(this.element.children)\n      .filter(el => matches(el, this.options.itemSelector))\n      .map(el => new ShuffleItem(el));\n  }\n\n  /**\n   * When new elements are added to the shuffle container, update the array of\n   * items because that is the order `_layout` calls them.\n   * @param {Array.<ShuffleItem>} items Items to track.\n   */\n  _saveNewItems(items) {\n    const children = Array.from(this.element.children);\n    this.items = sorter(this.items.concat(items), {\n      by(element) {\n        return children.indexOf(element);\n      },\n    });\n  }\n\n  _getFilteredItems() {\n    return this.items.filter(item => item.isVisible);\n  }\n\n  _getConcealedItems() {\n    return this.items.filter(item => !item.isVisible);\n  }\n\n  /**\n   * Returns the column size, based on column width and sizer options.\n   * @param {number} containerWidth Size of the parent container.\n   * @param {number} gutterSize Size of the gutters.\n   * @return {number}\n   * @private\n   */\n  _getColumnSize(containerWidth, gutterSize) {\n    let size;\n\n    // If the columnWidth property is a function, then the grid is fluid\n    if (typeof this.options.columnWidth === 'function') {\n      size = this.options.columnWidth(containerWidth);\n\n    // columnWidth option isn't a function, are they using a sizing element?\n    } else if (this.useSizer) {\n      size = Shuffle.getSize(this.options.sizer).width;\n\n    // if not, how about the explicitly set option?\n    } else if (this.options.columnWidth) {\n      size = this.options.columnWidth;\n\n    // or use the size of the first item\n    } else if (this.items.length > 0) {\n      size = Shuffle.getSize(this.items[0].element, true).width;\n\n    // if there's no items, use size of container\n    } else {\n      size = containerWidth;\n    }\n\n    // Don't let them set a column width of zero.\n    if (size === 0) {\n      size = containerWidth;\n    }\n\n    return size + gutterSize;\n  }\n\n  /**\n   * Returns the gutter size, based on gutter width and sizer options.\n   * @param {number} containerWidth Size of the parent container.\n   * @return {number}\n   * @private\n   */\n  _getGutterSize(containerWidth) {\n    let size;\n    if (typeof this.options.gutterWidth === 'function') {\n      size = this.options.gutterWidth(containerWidth);\n    } else if (this.useSizer) {\n      size = getNumberStyle(this.options.sizer, 'marginLeft');\n    } else {\n      size = this.options.gutterWidth;\n    }\n\n    return size;\n  }\n\n  /**\n   * Calculate the number of columns to be used. Gets css if using sizer element.\n   * @param {number} [containerWidth] Optionally specify a container width if\n   *    it's already available.\n   */\n  _setColumns(containerWidth = Shuffle.getSize(this.element).width) {\n    const gutter = this._getGutterSize(containerWidth);\n    const columnWidth = this._getColumnSize(containerWidth, gutter);\n    let calculatedColumns = (containerWidth + gutter) / columnWidth;\n\n    // Widths given from getStyles are not precise enough...\n    if (Math.abs(Math.round(calculatedColumns) - calculatedColumns) <\n        this.options.columnThreshold) {\n      // e.g. calculatedColumns = 11.998876\n      calculatedColumns = Math.round(calculatedColumns);\n    }\n\n    this.cols = Math.max(Math.floor(calculatedColumns), 1);\n    this.containerWidth = containerWidth;\n    this.colWidth = columnWidth;\n  }\n\n  /**\n   * Adjust the height of the grid\n   */\n  _setContainerSize() {\n    this.element.style.height = this._getContainerSize() + 'px';\n  }\n\n  /**\n   * Based on the column heights, it returns the biggest one.\n   * @return {number}\n   * @private\n   */\n  _getContainerSize() {\n    return arrayMax(this.positions);\n  }\n\n  /**\n   * Get the clamped stagger amount.\n   * @param {number} index Index of the item to be staggered.\n   * @return {number}\n   */\n  _getStaggerAmount(index) {\n    return Math.min(index * this.options.staggerAmount, this.options.staggerAmountMax);\n  }\n\n  /**\n   * Emit an event from this instance.\n   * @param {string} name Event name.\n   * @param {Object} [data={}] Optional object data.\n   */\n  _dispatch(name, data = {}) {\n    if (this.isDestroyed) {\n      return;\n    }\n\n    data.shuffle = this;\n    this.emit(name, data);\n  }\n\n  /**\n   * Zeros out the y columns array, which is used to determine item placement.\n   * @private\n   */\n  _resetCols() {\n    let i = this.cols;\n    this.positions = [];\n    while (i) {\n      i -= 1;\n      this.positions.push(0);\n    }\n  }\n\n  /**\n   * Loops through each item that should be shown and calculates the x, y position.\n   * @param {Array.<ShuffleItem>} items Array of items that will be shown/layed\n   *     out in order in their array.\n   */\n  _layout(items) {\n    let count = 0;\n    items.forEach((item) => {\n      const currPos = item.point;\n      const currScale = item.scale;\n      const itemSize = Shuffle.getSize(item.element, true);\n      const pos = this._getItemPosition(itemSize);\n\n      function callback() {\n        item.element.style.transitionDelay = '';\n        item.applyCss(ShuffleItem.Css.VISIBLE.after);\n      }\n\n      // If the item will not change its position, do not add it to the render\n      // queue. Transitions don't fire when setting a property to the same value.\n      if (Point.equals(currPos, pos) && currScale === ShuffleItem.Scale.VISIBLE) {\n        item.applyCss(ShuffleItem.Css.VISIBLE.before);\n        callback();\n        return;\n      }\n\n      item.point = pos;\n      item.scale = ShuffleItem.Scale.VISIBLE;\n\n      // Clone the object so that the `before` object isn't modified when the\n      // transition delay is added.\n      const styles = Object.assign({}, ShuffleItem.Css.VISIBLE.before);\n      styles.transitionDelay = this._getStaggerAmount(count) + 'ms';\n\n      this._queue.push({\n        item,\n        styles,\n        callback,\n      });\n\n      count += 1;\n    });\n  }\n\n  /**\n   * Determine the location of the next item, based on its size.\n   * @param {{width: number, height: number}} itemSize Object with width and height.\n   * @return {Point}\n   * @private\n   */\n  _getItemPosition(itemSize) {\n    return getItemPosition({\n      itemSize,\n      positions: this.positions,\n      gridSize: this.colWidth,\n      total: this.cols,\n      threshold: this.options.columnThreshold,\n      buffer: this.options.buffer,\n    });\n  }\n\n  /**\n   * Hides the elements that don't match our filter.\n   * @param {Array.<ShuffleItem>} collection Collection to shrink.\n   * @private\n   */\n  _shrink(collection = this._getConcealedItems()) {\n    let count = 0;\n    collection.forEach((item) => {\n      function callback() {\n        item.applyCss(ShuffleItem.Css.HIDDEN.after);\n      }\n\n      // Continuing would add a transitionend event listener to the element, but\n      // that listener would not execute because the transform and opacity would\n      // stay the same.\n      // The callback is executed here because it is not guaranteed to be called\n      // after the transitionend event because the transitionend could be\n      // canceled if another animation starts.\n      if (item.scale === ShuffleItem.Scale.HIDDEN) {\n        item.applyCss(ShuffleItem.Css.HIDDEN.before);\n        callback();\n        return;\n      }\n\n      item.scale = ShuffleItem.Scale.HIDDEN;\n\n      const styles = Object.assign({}, ShuffleItem.Css.HIDDEN.before);\n      styles.transitionDelay = this._getStaggerAmount(count) + 'ms';\n\n      this._queue.push({\n        item,\n        styles,\n        callback,\n      });\n\n      count += 1;\n    });\n  }\n\n  /**\n   * Resize handler.\n   * @private\n   */\n  _handleResize() {\n    // If shuffle is disabled, destroyed, don't do anything\n    if (!this.isEnabled || this.isDestroyed) {\n      return;\n    }\n\n    this.update();\n  }\n\n  /**\n   * Returns styles which will be applied to the an item for a transition.\n   * @param {Object} obj Transition options.\n   * @return {!Object} Transforms for transitions, left/top for animate.\n   * @protected\n   */\n  getStylesForTransition({ item, styles }) {\n    if (!styles.transitionDelay) {\n      styles.transitionDelay = '0ms';\n    }\n\n    const x = item.point.x;\n    const y = item.point.y;\n\n    if (this.options.useTransforms) {\n      styles.transform = `translate(${x}px, ${y}px) scale(${item.scale})`;\n    } else {\n      styles.left = x + 'px';\n      styles.top = y + 'px';\n    }\n\n    return styles;\n  }\n\n  /**\n   * Listen for the transition end on an element and execute the itemCallback\n   * when it finishes.\n   * @param {Element} element Element to listen on.\n   * @param {Function} itemCallback Callback for the item.\n   * @param {Function} done Callback to notify `parallel` that this one is done.\n   */\n  _whenTransitionDone(element, itemCallback, done) {\n    const id = onTransitionEnd(element, (evt) => {\n      itemCallback();\n      done(null, evt);\n    });\n\n    this._transitions.push(id);\n  }\n\n  /**\n   * Return a function which will set CSS styles and call the `done` function\n   * when (if) the transition finishes.\n   * @param {Object} opts Transition object.\n   * @return {Function} A function to be called with a `done` function.\n   */\n  _getTransitionFunction(opts) {\n    return (done) => {\n      opts.item.applyCss(this.getStylesForTransition(opts));\n      this._whenTransitionDone(opts.item.element, opts.callback, done);\n    };\n  }\n\n  /**\n   * Execute the styles gathered in the style queue. This applies styles to elements,\n   * triggering transitions.\n   * @private\n   */\n  _processQueue() {\n    if (this.isTransitioning) {\n      this._cancelMovement();\n    }\n\n    const hasSpeed = this.options.speed > 0;\n    const hasQueue = this._queue.length > 0;\n\n    if (hasQueue && hasSpeed && this.isInitialized) {\n      this._startTransitions(this._queue);\n    } else if (hasQueue) {\n      this._styleImmediately(this._queue);\n      this._dispatch(Shuffle.EventType.LAYOUT);\n\n    // A call to layout happened, but none of the newly visible items will\n    // change position or the transition duration is zero, which will not trigger\n    // the transitionend event.\n    } else {\n      this._dispatch(Shuffle.EventType.LAYOUT);\n    }\n\n    // Remove everything in the style queue\n    this._queue.length = 0;\n  }\n\n  /**\n   * Wait for each transition to finish, the emit the layout event.\n   * @param {Array.<Object>} transitions Array of transition objects.\n   */\n  _startTransitions(transitions) {\n    // Set flag that shuffle is currently in motion.\n    this.isTransitioning = true;\n\n    // Create an array of functions to be called.\n    const callbacks = transitions.map(obj => this._getTransitionFunction(obj));\n\n    parallel(callbacks, this._movementFinished.bind(this));\n  }\n\n  _cancelMovement() {\n    // Remove the transition end event for each listener.\n    this._transitions.forEach(cancelTransitionEnd);\n\n    // Reset the array.\n    this._transitions.length = 0;\n\n    // Show it's no longer active.\n    this.isTransitioning = false;\n  }\n\n  /**\n   * Apply styles without a transition.\n   * @param {Array.<Object>} objects Array of transition objects.\n   * @private\n   */\n  _styleImmediately(objects) {\n    if (objects.length) {\n      const elements = objects.map(obj => obj.item.element);\n\n      Shuffle._skipTransitions(elements, () => {\n        objects.forEach((obj) => {\n          obj.item.applyCss(this.getStylesForTransition(obj));\n          obj.callback();\n        });\n      });\n    }\n  }\n\n  _movementFinished() {\n    this._transitions.length = 0;\n    this.isTransitioning = false;\n    this._dispatch(Shuffle.EventType.LAYOUT);\n  }\n\n  /**\n   * The magic. This is what makes the plugin 'shuffle'\n   * @param {string|Function|Array.<string>} [category] Category to filter by.\n   *     Can be a function, string, or array of strings.\n   * @param {Object} [sortObj] A sort object which can sort the visible set\n   */\n  filter(category, sortObj) {\n    if (!this.isEnabled) {\n      return;\n    }\n\n    if (!category || (category && category.length === 0)) {\n      category = Shuffle.ALL_ITEMS; // eslint-disable-line no-param-reassign\n    }\n\n    this._filter(category);\n\n    // Shrink each hidden item\n    this._shrink();\n\n    // How many visible elements?\n    this._updateItemCount();\n\n    // Update transforms on visible elements so they will animate to their new positions.\n    this.sort(sortObj);\n  }\n\n  /**\n   * Gets the visible elements, sorts them, and passes them to layout.\n   * @param {Object} sortOptions The options object to pass to `sorter`.\n   */\n  sort(sortOptions = this.lastSort) {\n    if (!this.isEnabled) {\n      return;\n    }\n\n    this._resetCols();\n\n    const items = sorter(this._getFilteredItems(), sortOptions);\n\n    this._layout(items);\n\n    // `_layout` always happens after `_shrink`, so it's safe to process the style\n    // queue here with styles from the shrink method.\n    this._processQueue();\n\n    // Adjust the height of the container.\n    this._setContainerSize();\n\n    this.lastSort = sortOptions;\n  }\n\n  /**\n   * Reposition everything.\n   * @param {boolean} isOnlyLayout If true, column and gutter widths won't be\n   *     recalculated.\n   */\n  update(isOnlyLayout) {\n    if (this.isEnabled) {\n      if (!isOnlyLayout) {\n        // Get updated colCount\n        this._setColumns();\n      }\n\n      // Layout items\n      this.sort();\n    }\n  }\n\n  /**\n   * Use this instead of `update()` if you don't need the columns and gutters updated\n   * Maybe an image inside `shuffle` loaded (and now has a height), which means calculations\n   * could be off.\n   */\n  layout() {\n    this.update(true);\n  }\n\n  /**\n   * New items have been appended to shuffle. Mix them in with the current\n   * filter or sort status.\n   * @param {Array.<Element>} newItems Collection of new items.\n   */\n  add(newItems) {\n    const items = arrayUnique(newItems).map(el => new ShuffleItem(el));\n\n    // Add classes and set initial positions.\n    this._initItems(items);\n\n    // Add transition to each item.\n    this.setItemTransitions(items);\n\n    // Update the list of items.\n    this._saveNewItems(items);\n\n    // Update layout/visibility of new and old items.\n    this.filter(this.lastFilter);\n  }\n\n  /**\n   * Disables shuffle from updating dimensions and layout on resize\n   */\n  disable() {\n    this.isEnabled = false;\n  }\n\n  /**\n   * Enables shuffle again\n   * @param {boolean} [isUpdateLayout=true] if undefined, shuffle will update columns and gutters\n   */\n  enable(isUpdateLayout) {\n    this.isEnabled = true;\n    if (isUpdateLayout !== false) {\n      this.update();\n    }\n  }\n\n  /**\n   * Remove 1 or more shuffle items\n   * @param {Array.<Element>} elements An array containing one or more\n   *     elements in shuffle\n   * @return {Shuffle} The shuffle object\n   */\n  remove(elements) {\n    if (!elements.length) {\n      return;\n    }\n\n    const collection = arrayUnique(elements);\n\n    const oldItems = collection\n      .map(element => this.getItemByElement(element))\n      .filter(item => !!item);\n\n    const handleLayout = () => {\n      this._disposeItems(oldItems);\n\n      // Remove the collection in the callback\n      collection.forEach((element) => {\n        element.parentNode.removeChild(element);\n      });\n\n      this._dispatch(Shuffle.EventType.REMOVED, { collection });\n    };\n\n    // Hide collection first.\n    this._toggleFilterClasses({\n      visible: [],\n      hidden: oldItems,\n    });\n\n    this._shrink(oldItems);\n\n    this.sort();\n\n    // Update the list of items here because `remove` could be called again\n    // with an item that is in the process of being removed.\n    this.items = this.items.filter(item => !oldItems.includes(item));\n    this._updateItemCount();\n\n    this.once(Shuffle.EventType.LAYOUT, handleLayout);\n  }\n\n  /**\n   * Retrieve a shuffle item by its element.\n   * @param {Element} element Element to look for.\n   * @return {?ShuffleItem} A shuffle item or null if it's not found.\n   */\n  getItemByElement(element) {\n    return this.items.find(item => item.element === element);\n  }\n\n  /**\n   * Destroys shuffle, removes events, styles, and classes\n   */\n  destroy() {\n    this._cancelMovement();\n    window.removeEventListener('resize', this._onResize);\n\n    // Reset container styles\n    this.element.classList.remove('shuffle');\n    this.element.removeAttribute('style');\n\n    // Reset individual item styles\n    this._disposeItems(this.items);\n\n    this.items.length = 0;\n    this._transitions.length = 0;\n\n    // Null DOM references\n    this.options.sizer = null;\n    this.element = null;\n\n    // Set a flag so if a debounced resize has been triggered,\n    // it can first check if it is actually isDestroyed and not doing anything\n    this.isDestroyed = true;\n    this.isEnabled = false;\n  }\n\n  /**\n   * Returns the outer width of an element, optionally including its margins.\n   *\n   * There are a few different methods for getting the width of an element, none of\n   * which work perfectly for all Shuffle's use cases.\n   *\n   * 1. getBoundingClientRect() `left` and `right` properties.\n   *   - Accounts for transform scaled elements, making it useless for Shuffle\n   *   elements which have shrunk.\n   * 2. The `offsetWidth` property.\n   *   - This value stays the same regardless of the elements transform property,\n   *   however, it does not return subpixel values.\n   * 3. getComputedStyle()\n   *   - This works great Chrome, Firefox, Safari, but IE<=11 does not include\n   *   padding and border when box-sizing: border-box is set, requiring a feature\n   *   test and extra work to add the padding back for IE and other browsers which\n   *   follow the W3C spec here.\n   *\n   * @param {Element} element The element.\n   * @param {boolean} [includeMargins] Whether to include margins. Default is false.\n   * @return {{width: number, height: number}} The width and height.\n   */\n  static getSize(element, includeMargins) {\n    // Store the styles so that they can be used by others without asking for it again.\n    const styles = window.getComputedStyle(element, null);\n    let width = getNumberStyle(element, 'width', styles);\n    let height = getNumberStyle(element, 'height', styles);\n\n    if (includeMargins) {\n      const marginLeft = getNumberStyle(element, 'marginLeft', styles);\n      const marginRight = getNumberStyle(element, 'marginRight', styles);\n      const marginTop = getNumberStyle(element, 'marginTop', styles);\n      const marginBottom = getNumberStyle(element, 'marginBottom', styles);\n      width += marginLeft + marginRight;\n      height += marginTop + marginBottom;\n    }\n\n    return {\n      width,\n      height,\n    };\n  }\n\n  /**\n   * Change a property or execute a function which will not have a transition\n   * @param {Array.<Element>} elements DOM elements that won't be transitioned.\n   * @param {Function} callback A function which will be called while transition\n   *     is set to 0ms.\n   * @private\n   */\n  static _skipTransitions(elements, callback) {\n    const zero = '0ms';\n\n    // Save current duration and delay.\n    const data = elements.map((element) => {\n      const style = element.style;\n      const duration = style.transitionDuration;\n      const delay = style.transitionDelay;\n\n      // Set the duration to zero so it happens immediately\n      style.transitionDuration = zero;\n      style.transitionDelay = zero;\n\n      return {\n        duration,\n        delay,\n      };\n    });\n\n    callback();\n\n    // Cause forced synchronous layout.\n    elements[0].offsetWidth; // eslint-disable-line no-unused-expressions\n\n    // Put the duration back\n    elements.forEach((element, i) => {\n      element.style.transitionDuration = data[i].duration;\n      element.style.transitionDelay = data[i].delay;\n    });\n  }\n}\n\nShuffle.ShuffleItem = ShuffleItem;\n\nShuffle.ALL_ITEMS = 'all';\nShuffle.FILTER_ATTRIBUTE_KEY = 'groups';\n\n/**\n * @enum {string}\n */\nShuffle.EventType = {\n  LAYOUT: 'shuffle:layout',\n  REMOVED: 'shuffle:removed',\n};\n\n/** @enum {string} */\nShuffle.Classes = Classes;\n\n/**\n * @enum {string}\n */\nShuffle.FilterMode = {\n  ANY: 'any',\n  ALL: 'all',\n};\n\n// Overrideable options\nShuffle.options = {\n  // Initial filter group.\n  group: Shuffle.ALL_ITEMS,\n\n  // Transition/animation speed (milliseconds).\n  speed: 250,\n\n  // CSS easing function to use.\n  easing: 'ease',\n\n  // e.g. '.picture-item'.\n  itemSelector: '*',\n\n  // Element or selector string. Use an element to determine the size of columns\n  // and gutters.\n  sizer: null,\n\n  // A static number or function that tells the plugin how wide the gutters\n  // between columns are (in pixels).\n  gutterWidth: 0,\n\n  // A static number or function that returns a number which tells the plugin\n  // how wide the columns are (in pixels).\n  columnWidth: 0,\n\n  // If your group is not json, and is comma delimeted, you could set delimeter\n  // to ','.\n  delimeter: null,\n\n  // Useful for percentage based heights when they might not always be exactly\n  // the same (in pixels).\n  buffer: 0,\n\n  // Reading the width of elements isn't precise enough and can cause columns to\n  // jump between values.\n  columnThreshold: 0.01,\n\n  // Shuffle can be isInitialized with a sort object. It is the same object\n  // given to the sort method.\n  initialSort: null,\n\n  // By default, shuffle will throttle resize events. This can be changed or\n  // removed.\n  throttle,\n\n  // How often shuffle can be called on resize (in milliseconds).\n  throttleTime: 300,\n\n  // Transition delay offset for each item in milliseconds.\n  staggerAmount: 15,\n\n  // Maximum stagger delay in milliseconds.\n  staggerAmountMax: 250,\n\n  // Whether to use transforms or absolute positioning.\n  useTransforms: true,\n\n  // Affects using an array with filter. e.g. `filter(['one', 'two'])`. With \"any\",\n  // the element passes the test if any of its groups are in the array. With \"all\",\n  // the element only passes if all groups are in the array.\n  filterMode: Shuffle.FilterMode.ANY,\n};\n\n// Expose for testing. Hack at your own risk.\nShuffle.__Point = Point;\nShuffle.__sorter = sorter;\nShuffle.__getColumnSpan = getColumnSpan;\nShuffle.__getAvailablePositions = getAvailablePositions;\nShuffle.__getShortColumn = getShortColumn;\n\nexport default Shuffle;\n","import getNumber from './get-number';\n\nclass Point {\n\n  /**\n   * Represents a coordinate pair.\n   * @param {number} [x=0] X.\n   * @param {number} [y=0] Y.\n   */\n  constructor(x, y) {\n    this.x = getNumber(x);\n    this.y = getNumber(y);\n  }\n\n  /**\n   * Whether two points are equal.\n   * @param {Point} a Point A.\n   * @param {Point} b Point B.\n   * @return {boolean}\n   */\n  static equals(a, b) {\n    return a.x === b.x && a.y === b.y;\n  }\n}\n\nexport default Point;\n","export default {\n  BASE: 'shuffle',\n  SHUFFLE_ITEM: 'shuffle-item',\n  VISIBLE: 'shuffle-item--visible',\n  HIDDEN: 'shuffle-item--hidden',\n};\n","import Point from './point';\nimport Classes from './classes';\n\nlet id = 0;\n\nclass ShuffleItem {\n  constructor(element) {\n    id += 1;\n    this.id = id;\n    this.element = element;\n    this.isVisible = true;\n  }\n\n  show() {\n    this.isVisible = true;\n    this.element.classList.remove(Classes.HIDDEN);\n    this.element.classList.add(Classes.VISIBLE);\n    this.element.removeAttribute('aria-hidden');\n  }\n\n  hide() {\n    this.isVisible = false;\n    this.element.classList.remove(Classes.VISIBLE);\n    this.element.classList.add(Classes.HIDDEN);\n    this.element.setAttribute('aria-hidden', true);\n  }\n\n  init() {\n    this.addClasses([Classes.SHUFFLE_ITEM, Classes.VISIBLE]);\n    this.applyCss(ShuffleItem.Css.INITIAL);\n    this.scale = ShuffleItem.Scale.VISIBLE;\n    this.point = new Point();\n  }\n\n  addClasses(classes) {\n    classes.forEach((className) => {\n      this.element.classList.add(className);\n    });\n  }\n\n  removeClasses(classes) {\n    classes.forEach((className) => {\n      this.element.classList.remove(className);\n    });\n  }\n\n  applyCss(obj) {\n    Object.keys(obj).forEach((key) => {\n      this.element.style[key] = obj[key];\n    });\n  }\n\n  dispose() {\n    this.removeClasses([\n      Classes.HIDDEN,\n      Classes.VISIBLE,\n      Classes.SHUFFLE_ITEM,\n    ]);\n\n    this.element.removeAttribute('style');\n    this.element = null;\n  }\n}\n\nShuffleItem.Css = {\n  INITIAL: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    visibility: 'visible',\n    'will-change': 'transform',\n  },\n  VISIBLE: {\n    before: {\n      opacity: 1,\n      visibility: 'visible',\n    },\n    after: {},\n  },\n  HIDDEN: {\n    before: {\n      opacity: 0,\n    },\n    after: {\n      visibility: 'hidden',\n    },\n  },\n};\n\nShuffleItem.Scale = {\n  VISIBLE: 1,\n  HIDDEN: 0.001,\n};\n\nexport default ShuffleItem;\n","const element = document.body || document.documentElement;\nconst e = document.createElement('div');\ne.style.cssText = 'width:10px;padding:2px;box-sizing:border-box;';\nelement.appendChild(e);\n\nconst width = window.getComputedStyle(e, null).width;\nconst ret = width === '10px';\n\nelement.removeChild(e);\n\nexport default ret;\n"],"names":["E","match","el","selector","vendor","call","nodes","parentNode","querySelectorAll","i","length","throttle","func","wait","timeoutID","last","Date","rtn","apply","ctx","args","this","arguments","delta","setTimeout","noop","getNumber","value","parseFloat","getNumberStyle","element","style","styles","window","getComputedStyle","COMPUTED_SIZE_INCLUDES_PADDING","paddingTop","paddingBottom","borderTopWidth","borderBottomWidth","paddingLeft","paddingRight","borderLeftWidth","borderRightWidth","randomize","array","n","Math","floor","random","temp","sorter","arr","options","opts","Object","assign","defaults","original","Array","from","revert","by","sort","a","b","valA","key","valB","undefined","reverse","uniqueId","eventName","count","cancelTransitionEnd","id","transitions","removeEventListener","listener","onTransitionEnd","callback","evt","currentTarget","target","addEventListener","arrayMax","max","arrayMin","min","getColumnSpan","itemWidth","columnWidth","columns","threshold","columnSpan","abs","round","ceil","getAvailablePositions","positions","available","push","slice","getShortColumn","buffer","minPosition","len","getItemPosition","itemSize","gridSize","total","span","width","setY","shortColumnIndex","point","Point","setHeight","height","arrayUnique","x","Set","prototype","on","name","e","fn","once","self","off","_","emit","data","evtArr","evts","liveEvents","proto","Element","matches","matchesSelector","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","fns","context","maybeDone","err","result","finished","results","pending","forEach","y","ShuffleItem","isVisible","classList","remove","Classes","HIDDEN","add","VISIBLE","removeAttribute","setAttribute","addClasses","SHUFFLE_ITEM","applyCss","Css","INITIAL","scale","Scale","classes","className","obj","keys","removeClasses","document","body","documentElement","createElement","cssText","appendChild","ret","removeChild","Shuffle","useSizer","lastSort","group","ALL_ITEMS","lastFilter","isEnabled","isDestroyed","isInitialized","_transitions","isTransitioning","_queue","_this","_getElementOption","TypeError","_init","items","_getItems","sizer","BASE","_initItems","_onResize","_getResizeFunction","readyState","layout","bind","onLoad","containerCss","containerWidth","getSize","_validateStyles","_setColumns","filter","initialSort","offsetWidth","setItemTransitions","transition","speed","easing","resizeFunction","_handleResize","throttleTime","option","querySelector","nodeType","jquery","position","overflow","category","collection","set","_getFilteredSets","_toggleFilterClasses","visible","hidden","item","_this2","_doesPassFilter","testCategory","includes","attr","getAttribute","FILTER_ATTRIBUTE_KEY","delimeter","split","JSON","parse","isArray","filterMode","FilterMode","ANY","some","every","show","hide","init","dispose","visibleItems","_getFilteredItems","str","useTransforms","children","_this3","itemSelector","map","concat","indexOf","gutterSize","size","gutterWidth","gutter","_getGutterSize","_getColumnSize","calculatedColumns","columnThreshold","cols","colWidth","_getContainerSize","index","staggerAmount","staggerAmountMax","shuffle","transitionDelay","after","currPos","currScale","pos","_this4","_getItemPosition","equals","before","_getStaggerAmount","_getConcealedItems","_this5","update","transform","left","top","itemCallback","done","_this6","getStylesForTransition","_whenTransitionDone","_cancelMovement","hasSpeed","hasQueue","_startTransitions","_styleImmediately","_dispatch","EventType","LAYOUT","callbacks","_this7","_getTransitionFunction","_movementFinished","objects","elements","_skipTransitions","_this8","sortObj","_filter","_shrink","_updateItemCount","sortOptions","_resetCols","_layout","_processQueue","_setContainerSize","isOnlyLayout","newItems","_saveNewItems","isUpdateLayout","oldItems","_this9","getItemByElement","handleLayout","_disposeItems","REMOVED","find","includeMargins","duration","transitionDuration","delay","TinyEmitter","__Point","__sorter","__getColumnSpan","__getAvailablePositions","__getShortColumn"],"mappings":"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"}